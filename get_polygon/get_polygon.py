# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AddressToPolygon
                                 A QGIS plugin
 get polygon by address
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-02
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Bezdarass
        email                : bezdar@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QFileDialog

import overpy
import pandas as pd
import time
from geopy.geocoders import Nominatim
import re

from qgis.core import (
    QgsVectorLayer,
    QgsFields,
    QgsField,
    QgsFeature,
    QgsGeometry,
    QgsPointXY,
    QgsPolygon,
    QgsWkbTypes,
    QgsProject,
    QgsMapLayer,
    Qgis
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .get_polygon_dialog import AddressToPolygonDialog
import os.path


class AddressToPolygon:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AddressToPolygon_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AddressToPolygon')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.currentPage = False
        self.file_path = ""

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AddressToPolygon', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/get_polygon/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Click for start'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AddressToPolygon'),
                action)
            self.iface.removeToolBarIcon(action)


    def getAddressQuery(self, address):
        address_data = {"city": "", "street": "", "house": "", "building": "", "quarter": False}
        split_address = address.split(",")
        split_address = list(map(lambda x: x.strip(), split_address))
        
        for item in split_address[::-1]:
            if (address_data["street"] != "" and address_data["house"] != ""):
                break

            if item.startswith("к") or item.startswith("лит"):
                try:
                    address_data["building"] = re.search(r"((к|лит)\.?.*?)(\d+|[a-zA-Z]|[а-яА-Я])", item).group(3)
                    address_data["building"] = address_data["building"].upper()
                except Exception as ex:
                    print(ex)
            elif item.startswith("д"):
                try:
                    address_data["house"] = re.search(r"(д\.?.*?)(\d+[a-zA-Zа-яА-Я]?(\s+[a-zA-Zа-яА-Я]$)?(\s*\/\s*([a-zA-Zа-яА-Я]|\d+))?)(\s*?|$)", item).group(2)
                    address_data["house"] = address_data["house"].replace(" ", "").upper()
                except Exception as ex:
                    print(ex)
            elif item.startswith("кв-л") or item.startswith("п."):
                address_data["quarter"] = True
                address_data["street"] = " ".join(item.split()[1::])
                temp = re.search(r"(\d+([a-zA-Zа-яА-Я]))", address_data["street"])
                if temp:
                    address_data["street"] = address_data["street"].replace(temp.group(2), "")
            elif item.startswith("мкр") or item.startswith("линия"):
                addon = "микрорайон " if item.startswith("мкр") else "линия "          
                temp = re.search(r"\d+(-(\w+|[А-Яа-я]+)?)", item)
                if temp:
                    item = item.replace(temp.group(1), "")
                address_data["street"] = addon + " ".join(item.split()[1::])
                address_data["street"] = re.sub(r"\s*\(.+\)\s*", "", address_data["street"])
            elif  item.startswith("проезд"):
                temp = re.search(r"\d+(-(\w+|[А-Яа-я]+)?)", item)
                if temp:
                    item = item.replace(temp.group(1), "")
                address_data["street"] = item
            else:
                try:
                    addon = ""
                    if item.startswith("ул."):
                        addon = "улица "
                    address_data["street"] = re.search(r"(([а-яА-Яa-zA-Z]+)(-[а-яА-Яa-zA-Z]+)?\.?\s*)(.+)($)", item).group(4)
                    address_data["street"] = re.sub(r"\s*\(.+\)\s*", "", address_data["street"])
                    address_data["street"] = addon + address_data["street"]
                except Exception as ex:
                    print(ex)

        for item in split_address[1::]:
            if address_data["city"] != "":
                break

            if item.startswith("р-н"):
                continue
            else:
                address_data["city"] = re.search(r"([a-zA-Z]+|[а-яА-Я]+\.?\s*)(.+)($)", item).group(2)
        
        if (address_data["building"].isdigit()):
            address_data["building"] = "/" + address_data["building"]

        return f"хмао {address_data["city"]} {address_data["street"]} {address_data["house"]}{address_data["building"]}"


    def getPoints(self, query):
        overpassAPI = overpy.Overpass()

        try:
            result = overpassAPI.query(query)
        except Exception as ex:
            print(ex)

        nodes = result.nodes
        ways = result.ways

        if nodes == []:
            return

        coordinates = {}
        points = []

        for element in nodes:
            coordinates[element.id] = (element.lon, element.lat)

        for element in ways:
            for node in element.nodes:
                points.append(QgsPointXY(float(coordinates[node.id][0]), float(coordinates[node.id][1])))
        
        return points
    

    def showFirstPage(self):
        self.dlg.label.show()
        self.dlg.lineEdit.show()
        self.dlg.checkBox.show()

        self.dlg.label_3.hide()
        self.dlg.uploadFileButton.hide()

        
        if (self.currentPage):
            self.printBtnPage()
            self.currentPage = not self.currentPage
        return

    def showSecondPage(self):
        self.dlg.label.hide()
        self.dlg.lineEdit.hide()
        self.dlg.checkBox.hide()

        self.dlg.label_3.show()
        self.dlg.uploadFileButton.show()
        
        if not (self.currentPage):
            self.printBtnPage()
            self.currentPage = not self.currentPage
        
        return

    def printBtnPage(self):
        style1 = self.dlg.firstPage.styleSheet()
        style2 = self.dlg.secondPage.styleSheet()

        self.dlg.secondPage.setStyleSheet(style1)
        self.dlg.firstPage.setStyleSheet(style2)
        
        return


    def uploadFile(self):
        file_path, _ = QFileDialog.getOpenFileName(
            None,
            "Выберите файл",
            "",
            "Таблицы (*.csv *.xls *.xlsx)"
        )
        if file_path:
            self.file_path = file_path
            self.dlg.uploadFileButton.setText(file_path.split("/")[-1])  
        return


    def searchLocation(self, geolocator, address_query):
        location = geolocator.geocode(address_query)
        
        if location:
            osm_id = location.raw.get("osm_id")
        else:
            self.iface.messageBar().pushMessage( f"Адрес не найден",level=Qgis.Critical, duration=3)
            return

        points = self.getPoints(f"""
            [out:json];
            way["building"]({osm_id});
            out body;
            >;
            out skel qt;
        """)
        return points
    
    def paintPolygons(self, geolocator,file_path,layer,provider):
        table = pd.read_csv(file_path)
        attributesName = table.columns.tolist()
        provider.addAttributes([QgsField(title, QVariant.String) for title in attributesName])
        layer.updateFields()
        counter = 0
        for index, item in table.iterrows():
            address_query = self.getAddressQuery(item["Наименование инвестиционного проекта"])
            print(address_query)
            points = self.searchLocation(geolocator, address_query)
            if not points:
                print(item["Наименование инвестиционного проекта"] + " не был найден")
                counter += 1
                continue
            
            try:
                polygon = QgsGeometry.fromPolygonXY([points])

                feature = QgsFeature()
                feature.setGeometry(polygon)
                feature.setFields(layer.fields())
                for title in attributesName:
                    feature.setAttribute(title, item[title])
                provider.addFeatures([feature])
                layer.updateExtents()
                time.sleep(1)  
            except Exception as ex:
                print(ex)

        if counter < len(table):
            return layer
        
        return
    

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = AddressToPolygonDialog()
            self.showFirstPage()
        elif self.first_start == False:
            if self.currentPage:
                self.showSecondPage()
            else:
                self.showFirstPage()

        # show the dialog
        layers = QgsProject.instance().mapLayers().values()
        self.dlg.comboBox.clear()

        layers_dict = {}

        self.dlg.comboBox.addItem("Новый слой")
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                if layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                    layers_dict[layer.name()] = layer
                    self.dlg.comboBox.addItem(layer.name())

        first_page = self.dlg.firstPage
        second_page = self.dlg.secondPage
        
        lineEdit = self.dlg.lineEdit
        checkBox = self.dlg.checkBox
        uploadFileButton = self.dlg.uploadFileButton
        label_3 = self.dlg.label_3

        first_page.clicked.connect(self.showFirstPage)
        second_page.clicked.connect(self.showSecondPage)
        uploadFileButton.clicked.connect(self.uploadFile)
        self.dlg.uploadFileButton.setText("Загрузить csv")

        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            geolocator = Nominatim(user_agent="my_geocoder")

            if self.dlg.comboBox.currentText() == "Новый слой":
                layer = QgsVectorLayer("Polygon?crs=EPSG:4326", "NewLayer", "memory")
            else:
                layer = layers_dict[self.dlg.comboBox.currentText()]
            provider = layer.dataProvider()
            layer.updateFields()

            if not self.currentPage:
                address = lineEdit.text()
                if address == "":
                    return
                free_search = checkBox.isChecked()

                if free_search:
                    address_query = address
                else:
                    address_query = self.getAddressQuery(address)
                print(address_query)
                points = self.searchLocation(geolocator, address_query)
                provider.addAttributes([QgsField("address_mo", QVariant.String)])
                layer.updateFields()
                try:
                    polygon = QgsGeometry.fromPolygonXY([points])

                    feature = QgsFeature()
                    feature.setGeometry(polygon)
                    feature.setFields(layer.fields())
                    feature.setAttribute("address_mo", address)
                    provider.addFeatures([feature])
                    layer.updateExtents()
                except:
                    pass
            else:
                print("Выбранный файл:", self.file_path)
                layer = self.paintPolygons(geolocator, self.file_path, layer, provider)
                if not layer:
                    self.iface.messageBar().pushMessage(
                    "Error",
                    level=Qgis.Critical, duration=3)
                    return
            try:
                QgsProject.instance().addMapLayer(layer)

                self.iface.messageBar().pushMessage(
                "Success",
                level=Qgis.Success, duration=3)
            except Exception as ex:
                print(ex)

            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

        